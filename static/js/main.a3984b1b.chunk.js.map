{"version":3,"sources":["config.ts","utils/isDev.ts","hooks/useGetRequest.ts","utils/defaultTexts.ts","contexts/TextsContext.tsx","hooks/useTexts.ts","components/App/App.tsx","index.tsx"],"names":["config","baseURI","development","process","env","NODE_ENV","isDev","useGetRequest","endpoint","useState","isLoading","setIsLoading","responseData","setResponseData","undefined","error","setError","useEffect","a","url","axios","get","response","data","console","fetchData","defaultTexts","demoText","searchText","signinText","edtchText","navleftText","TextsContext","createContext","TextsContextProvider","children","Provider","value","useTexts","useContext","App","texts","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAIeA,EAJA,CACbC,QAAS,wC,iBCCLC,GAAwBC,IAAQC,IAAIC,UAAqC,gBAAzBF,IAAQC,IAAIC,SAMnDC,EAJD,WACZ,OAAOJ,GCgCMK,EA5BO,SAAcC,GAA8D,IAAD,EAC7DC,oBAAkB,GAD2C,mBACxFC,EADwF,KAC7EC,EAD6E,OAEvDF,mBAA6B,MAF0B,mBAExFG,EAFwF,KAE1EC,EAF0E,OAGrEJ,wBAA6BK,GAHwC,mBAGxFC,EAHwF,KAGjFC,EAHiF,KAyB/F,OApBAC,qBAAU,YACO,uCAAG,8BAAAC,EAAA,sEAERC,EAAMnB,EAAOC,QAAUO,EAFf,SAGSY,IAAMC,IAAiBF,GAHhC,OAGRG,EAHQ,OAIdT,EAAgBS,EAASC,MAJX,gDAMVjB,KAEFkB,QAAQT,MAAR,MAEFC,EAAS,EAAD,IAVM,yBAYdL,GAAa,GAZC,4EAAH,qDAgBfc,KACC,CAACjB,IAEG,CAACI,EAAcF,EAAWK,IC1BpBW,EARM,CACnBC,SAAU,YACVC,WAAY,6BACZC,WAAY,UACZC,UAAW,SACXC,YAAa,iBCEFC,EAAeC,wBAA2BP,GAI1CQ,EAAuB,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,SAA2C,EACjE5B,EAA2B,UAAnCgB,EADyE,oBAGhF,OAAO,kBAACS,EAAaI,SAAd,CAAuBC,MAAOd,GAAQG,GAAeS,ICN/CG,EALE,WAEf,OADcC,qBAAWP,ICaZQ,G,MAbO,WACpB,IAAMC,EAAQH,IAEd,OACE,yBAAKI,UAAU,OACb,4BAAQA,UAAU,cAChB,2BAAID,EAAMd,UACV,wE,oCCLRgB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.a3984b1b.chunk.js","sourcesContent":["const config = {\n  baseURI: 'https://jsonplaceholder.typicode.com', // The main URI to the API to which the app makes requests to (exlude trailing /)\n};\n\nexport default config;\n","import process from 'process';\n\nconst development: boolean = !process.env.NODE_ENV || process.env.NODE_ENV === 'development';\n\nconst isDev = (): boolean => {\n  return development;\n};\n\nexport default isDev;\n","import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport config from '../config';\nimport isDev from '../utils/isDev';\n\n/** @description Creates a GET request to the base URI set up in the config file and the endpoint provided as an argument\n * @param {string} endpoint Endpoint to which the GET request is made\n * @return {Array} The result, loading state and error state as an array which can be destructured\n */\nconst useGetRequest = <FetchedData>(endpoint: string): [FetchedData | null, boolean, string?] => {\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [responseData, setResponseData] = useState<FetchedData | null>(null);\n  const [error, setError] = useState<string | undefined>(undefined);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const url = config.baseURI + endpoint;\n        const response = await axios.get<FetchedData>(url);\n        setResponseData(response.data);\n      } catch (e) {\n        if (isDev()) {\n          // eslint-disable-next-line no-console\n          console.error(e);\n        }\n        setError(e);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [endpoint]);\n\n  return [responseData, isLoading, error];\n};\n\nexport default useGetRequest;\n","const defaultTexts = {\n  demoText: 'Demo text',\n  searchText: 'What are you searching for',\n  signinText: 'Sign In',\n  edtchText: 'EdTech',\n  navleftText: 'For Companies',\n};\n\nexport default defaultTexts;\n","import React from 'react';\nimport { createContext } from 'react';\nimport useGetRequest from '../hooks/useGetRequest';\nimport defaultTexts from '../utils/defaultTexts';\n\nexport type TextsScheme = typeof defaultTexts;\n\nexport const TextsContext = createContext<TextsScheme>(defaultTexts);\n\ntype ReactChildren = { children?: React.ReactNode };\n\nexport const TextsContextProvider = ({ children }: ReactChildren): JSX.Element => {\n  const [data] = useGetRequest<TextsScheme>('/texts');\n\n  return <TextsContext.Provider value={data || defaultTexts}>{children}</TextsContext.Provider>;\n};\n","import { useContext } from 'react';\nimport { TextsContext, TextsScheme } from '../contexts/TextsContext';\n\nconst useTexts = (): TextsScheme => {\n  const texts = useContext(TextsContext);\n  return texts;\n};\n\nexport default useTexts;\n","import React from 'react';\nimport useTexts from '../../hooks/useTexts';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const texts = useTexts();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>{texts.demoText}</p>\n        <p>Boilerplate code for EdTech front-end</p>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components';\nimport { TextsContextProvider } from './contexts/TextsContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TextsContextProvider>\n      <App />\n    </TextsContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}